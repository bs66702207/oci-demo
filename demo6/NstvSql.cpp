#include "NstvException.h"#include "NstvSql.h"#include <string.h>#include <iostream>#include <stdlib.h>#include <stdio.h>using namespace std;NstvSql::NstvSql(NstvConnection* connect){	conn = connect;}/** *创建oci语句句柄*/bool NstvSql::createStmthp(){		sword status;	status = OCIHandleAlloc((dvoid*)conn->envhp, (dvoid**)&stmthp, (ub4)OCI_HTYPE_STMT, (size_t)0, (dvoid**)0);	if (status != OCI_SUCCESS){		isOk_ = false;		return false;	}	else{		isOk_ = true ;		return true;	}}void NstvSql::prepareSql(const char* sql){	if (isOk_){		/*准备SQL语句*/		//cout<<sql<<endl;		if (!NstvException::checkErr(conn->errhp, OCIStmtPrepare(stmthp, conn->errhp, (text *)sql, (ub4)strlen(sql), (ub4)OCI_NTV_SYNTAX, (ub4)OCI_DEFAULT)))			throw NstvException();	}}void NstvSql::bindInt(int pos, const int* bnd){	OCIBind *bindhp= NULL;	if (!NstvException::checkErr(conn->errhp, OCIBindByPos(stmthp, &bindhp, conn->errhp, pos, 		(dvoid *)bnd, sizeof(int), SQLT_INT, (dvoid *)0, (ub2 *)0, (ub2 *)0, (ub4)0, (ub4 *)0, OCI_DEFAULT)))		throw NstvException();}void NstvSql::bindStr(char *name, const char* bnd){	OCIBind *bindhp= NULL;	cout<<"bindStr"<<endl;	if (!NstvException::checkErr(conn->errhp, OCIBindByName(stmthp, &bindhp, conn->errhp, (text *)name, strlen(name), 		(dvoid *)bnd, strlen(bnd)+1, SQLT_STR, (dvoid *)0, (ub2 *)0, (ub2 *)0, (ub4)0, (ub4 *)0, OCI_DEFAULT)))		throw NstvException();		cout<<"bindStr"<<endl;}void NstvSql::prepareResultInt(int pos, int* res){	OCIDefine *defhp = NULL;	if (!NstvException::checkErr(conn->errhp, OCIDefineByPos(stmthp, &defhp, conn->errhp, pos, (dvoid *)res, sizeof(int), SQLT_INT, 			(dvoid *)0, (ub2 *)0, (ub2 *)0, OCI_DEFAULT)))		throw NstvException();}void NstvSql::prepareResultStr(int pos, char* res, int len){	OCIDefine *defhp = NULL;	if (!NstvException::checkErr(conn->errhp, OCIDefineByPos(stmthp, &defhp, conn->errhp, pos, (dvoid *)res, len, SQLT_STR, 			(dvoid *)0, (ub2 *)0, (ub2 *)0, OCI_DEFAULT)))		throw NstvException();}void NstvSql::getSqlType(){	if (!NstvException::checkErr(conn->errhp, OCIAttrGet ((dvoid *)stmthp, (ub4)OCI_HTYPE_STMT, (dvoid *)&stmtype, 		(ub4 *)0, (ub4)OCI_ATTR_STMT_TYPE, conn->errhp)))		throw NstvException();	switch(stmtype){		case OCI_STMT_SELECT:			cout<<"sql类型为 select"<<endl;			break;		case OCI_STMT_UPDATE:			cout<<"sql类型为 update"<<endl;			break;		case OCI_STMT_DELETE:			cout<<"sql类型为 delete"<<endl;			break;		case OCI_STMT_INSERT:			cout<<"sql类型为 insert"<<endl;			break;		default:			cout<<"sql类型为 others"<<endl;			break;	}	}bool NstvSql::execute(int times){	sword status;	status = OCIStmtExecute(conn->svchp, stmthp, conn->errhp, 								  (ub4)times, (ub4)0, (OCISnapshot *)NULL, 								  (OCISnapshot *)NULL, (ub4)OCI_DEFAULT);	if (!NstvException::checkErr(conn->errhp, status))		throw NstvException();	return true;}bool NstvSql::handleTrans(){	bool status=true;	if (isOk_){		getSqlType();		if (stmtype == OCI_STMT_SELECT){			if(!execute(1)){				status = false;			}else				status = true;		}else{				NstvException::checkErr(conn->errhp, OCITransStart (conn->svchp, conn->errhp, 60, OCI_TRANS_NEW));			if(execute(1))				NstvException::checkErr(conn->errhp, OCITransCommit(conn->svchp, conn->errhp, (ub4) 0));			else{				NstvException::checkErr(conn->errhp, OCITransRollback(conn->svchp, conn->errhp, (ub4) 0));				status = false;			}		}	}	return status; }bool NstvSql::nextResults(){	sword status = 	OCIStmtFetch2(stmthp, conn->errhp, 1, OCI_FETCH_NEXT, 1, OCI_DEFAULT);	if (status == OCI_SUCCESS || status == OCI_SUCCESS_WITH_INFO)		return true;			return false;}void NstvSql::freeStmthp(){	if(isOk_){		OCIHandleFree((dvoid *)stmthp, (ub4)OCI_HTYPE_STMT);		isOk_ = false;	}}