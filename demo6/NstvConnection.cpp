#include "NstvException.h"#include "NstvConnection.h"#include <string.h>#include <iostream>using namespace std;NstvConnection::NstvConnection(){	connected = FALSE;	envhp = 0;	errhp = 0;	srvhp = 0;	svchp = 0;	sessionhp = 0;	dschp = 0;	tranhp = 0;}bool NstvConnection::connect(const char* dblink, const char* username, const char* password){	sword status;	int mode = OCI_THREADED|OCI_OBJECT;		OCIEnvCreate((OCIEnv **)&envhp, mode,(dvoid *)0,			(dvoid * (*)(dvoid *, size_t))0,			(dvoid * (*)(dvoid *, dvoid *, size_t))0,			(void (*)(dvoid *, dvoid *))0,			(size_t)0, (dvoid **)0);				OCIHandleAlloc((dvoid*)envhp, (dvoid**)&errhp, (ub4)OCI_HTYPE_ERROR,					   (size_t)0, (dvoid**)0);	OCIHandleAlloc((dvoid*)envhp, (dvoid**)&srvhp, (ub4)OCI_HTYPE_SERVER,					   (size_t)0, (dvoid**)0);	status = OCIServerAttach(srvhp, errhp, (text*)dblink, 								 (sb4)strlen(dblink), (ub4)OCI_DEFAULT);	if (status != OCI_SUCCESS)		return FALSE;	OCIHandleAlloc((dvoid*)envhp, (dvoid**)&svchp, (ub4)OCI_HTYPE_SVCCTX, 					   (size_t)0, (dvoid**)0);	OCIAttrSet((dvoid*)svchp, (ub4)OCI_HTYPE_SVCCTX, (dvoid*)srvhp, (ub4)0, 				   (ub4)OCI_ATTR_SERVER, errhp); 	OCIHandleAlloc((dvoid*)envhp, (dvoid**)&sessionhp, (ub4)OCI_HTYPE_SESSION, 					   (size_t)0, (dvoid**)0);	OCIAttrSet((dvoid*)sessionhp, (ub4)OCI_HTYPE_SESSION, (dvoid*)username, 				   (ub4)strlen(username), (ub4)OCI_ATTR_USERNAME, errhp);	OCIAttrSet((dvoid*)sessionhp, (ub4)OCI_HTYPE_SESSION, (dvoid*)password, 				   (ub4)strlen(password), (ub4)OCI_ATTR_PASSWORD, errhp);	// 初始化描述句柄	OCIHandleAlloc((dvoid*)envhp, (dvoid**)&dschp, 	    (ub4)OCI_HTYPE_DESCRIBE, (size_t)0, (dvoid **)0);  	// 开始会话	status = OCISessionBegin(svchp, errhp, sessionhp, OCI_CRED_RDBMS, 								 OCI_DEFAULT);	// 检查错误	NstvException::checkErr(errhp, status);	if (status != OCI_SUCCESS)		return FALSE;	OCIAttrSet((dvoid*)svchp, (ub4)OCI_HTYPE_SVCCTX, (dvoid*)sessionhp, (ub4)0, 				   (ub4)OCI_ATTR_SESSION, errhp);	// 分配事务句柄	OCIHandleAlloc((dvoid *)envhp, (dvoid **)&tranhp, OCI_HTYPE_TRANS, 0, 0);	OCIAttrSet((dvoid *)svchp, OCI_HTYPE_SVCCTX, (dvoid *)tranhp, 0,	OCI_ATTR_TRANS, errhp);	connected = true;	return true;}void NstvConnection::disconnect(){		if (connected)	{		// 结束会话		OCISessionEnd(svchp, errhp, sessionhp, (ub4)OCI_DEFAULT);		OCIServerDetach(srvhp, errhp, (ub4)OCI_DEFAULT);		// 释放句柄		OCIHandleFree((dvoid*)tranhp, (ub4)OCI_HTYPE_TRANS);		OCIHandleFree((dvoid*)srvhp, (ub4)OCI_HTYPE_SERVER);		OCIHandleFree((dvoid*)svchp, (ub4)OCI_HTYPE_SVCCTX);		OCIHandleFree((dvoid*)errhp, (ub4)OCI_HTYPE_ERROR);		OCIHandleFree((dvoid *)dschp, (ub4)OCI_HTYPE_DESCRIBE);		connected = false;				envhp = 0;		errhp = 0;		srvhp = 0;		svchp = 0;		sessionhp = 0;		dschp = 0;		tranhp = 0;	}}